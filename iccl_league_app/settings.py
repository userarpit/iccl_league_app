"""
Django settings for iccl_league_app project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os  # Add this at the top if not already there
# from dotenv import load_dotenv
import environ

BASE_DIR = Path(__file__).resolve().parent.parent  # This defines BASE_DIR
print(BASE_DIR)
# Load environment variables from .env file
# load_dotenv(os.path.join(BASE_DIR, ".env"))
env = environ.Env()
environ.Env.read_env(os.path.join(BASE_DIR, ".env"))

with open(os.path.join(BASE_DIR, ".env")) as f:
    for line in f:
        if line.strip() and not line.startswith("#"):
            key, value = line.strip().split("=", 1)
            os.environ[key] = value  # force override
            
print(os.getenv("DJANGO_DEBUG"))
print(os.getenv("DATABASE_NAME"))
print(os.getenv("DATABASE_USER"))
print(os.getenv("DATABASE_HOST"))
print(os.getenv("DATABASE_PORT"))

print("DEBUG from .env:", env("DJANGO_DEBUG", default="NOT FOUND"))
print("DEBUG from os.environ:", os.environ.get("DATABASE_HOST"))

CLOUDINARY_STORAGE = {
    "CLOUD_NAME": os.environ.get("CLOUDINARY_CLOUD_NAME"),
    "API_KEY": os.environ.get("CLOUDINARY_API_KEY"),
    "API_SECRET": os.environ.get("CLOUDINARY_API_SECRET"),
}

DEFAULT_FILE_STORAGE = "cloudinary_storage.storage.MediaCloudinaryStorage"
# STATIC_URL = '/static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "league", "static"),  # Project-wide static files
]

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# Reads from system environment variable, or falls back to .env
SECRET_KEY = os.getenv("DJANGO_SECRET_KEY")
# print(SECRET_KEY)

# SECURITY WARNING: don't run with debug turned on in production!
# Reads from system environment variable, or falls back to .env
DEBUG = os.getenv("DJANGO_DEBUG") == "True"

# settings.py
# settings.py

ALLOWED_HOSTS = [
    "127.0.0.1",
    "iccl-league-app.onrender.com",
]

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "league.apps.LeagueConfig",
    "more_admin_filters",
    "cloudinary_storage",
    "cloudinary",
    "tracking",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "tracking.middleware.VisitorTrackingMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
]

ROOT_URLCONF = "iccl_league_app.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "iccl_league_app.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# iccl_league_app/settings.py

# iccl_league_app/settings.py

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",  # Use the postgres SQL
        "NAME": os.getenv("DATABASE_NAME"),
        "USER": os.getenv("DATABASE_USER"),
        "PASSWORD": os.getenv("DATABASE_PASSWORD"),
        "HOST": os.getenv("DATABASE_HOST"),
        "PORT": os.getenv("DATABASE_PORT"),
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

# settings.py

# ...
TIME_ZONE = "Asia/Kolkata"
# ...

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"

STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"
# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Media files
# Path where uploaded player images will be stored
# # A top-level 'media' directory is the standard practice
# MEDIA_ROOT = os.path.join(BASE_DIR, "media")

# # URL that handles the media served from MEDIA_ROOT
# MEDIA_URL = "/media/"

EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = "smtp.gmail.com"  # Example for Gmail, use your provider
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = "masterarpit@gmail.com"  # Your email address
EMAIL_HOST_PASSWORD = (
    "wfbh wbdm bvkc oimy"  # Your email password or app-specific password
)

CSRF_TRUSTED_ORIGINS = ["https://phonotypically-unchanneled-sommer.ngrok-free.app"]

# settings.py
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
        },
    },
    "root": {
        "handlers": ["console"],
        "level": "DEBUG",
    },
}
